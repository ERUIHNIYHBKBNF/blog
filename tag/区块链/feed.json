{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eruの兔叽窝 • All posts by \"区块链\" tag",
    "description": "嘤嘤嘤~",
    "home_page_url": "https://eruihniyhbkbnf.github.io/blog",
    "items": [
        {
            "id": "https://eruihniyhbkbnf.github.io/blog/2022/11/28/%E5%8C%BA%E5%9D%97%E9%93%BE-Hyperledger-Fabric%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/",
            "url": "https://eruihniyhbkbnf.github.io/blog/2022/11/28/%E5%8C%BA%E5%9D%97%E9%93%BE-Hyperledger-Fabric%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/",
            "title": "[区块链] Hyperledger Fabric实验环境搭建记录",
            "date_published": "2022-11-28T14:22:56.000Z",
            "content_html": "<p>Hyperledger Fabric 安装：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oeXBlcmxlZGdlci1mYWJyaWMucmVhZHRoZWRvY3MuaW8vemhfQ04vbGF0ZXN0L2luc3RhbGwuaHRtbA==\">安装示例、二进制和 Docker 镜像 ‒ hyperledger-fabricdocs master 文档</span></p>\n<p>文档地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oeXBlcmxlZGdlci1mYWJyaWMucmVhZHRoZWRvY3MuaW8vemhfQ04vbGF0ZXN0L3dyaXRlX2ZpcnN0X2FwcC5odG1s\">编写你的第一个应用 ‒ hyperledger-fabricdocs master 文档</span></p>\n<blockquote>\n<p>注意这边中文文档这里是 js 的 fabCar 例子，英文文档给的是另一个 ts 的例子，作者因为课程实验要求按中文文档来的 (2022.11.28)</p>\n</blockquote>\n<p>Github 例子地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2h5cGVybGVkZ2VyL2ZhYnJpYy1zYW1wbGVz\">https://github.com/hyperledger/fabric-samples</span></p>\n<h2 id=\"这是什么\"><a class=\"markdownIt-Anchor\" href=\"#这是什么\">#</a> 这是什么</h2>\n<p>粘贴自 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9jbi9ibG9ja2NoYWluL3doYXQtaXMtaHlwZXJsZWRnZXItZmFicmljLw==\">Hyperledger Fabric 是什么_开源区块链框架介绍 - AWS 云服务</span></p>\n<blockquote>\n<p>Hyperledger Fabric 是一种开源许可区块链框架，由 The Linux Foundation 在 2015 年开始提供。它采用模块化通用型框架，所具有的独一无二的身份管理及访问控制功能使其非常适用于各种行业应用，例如，供应链的追踪和跟踪、贸易融资、忠诚度和奖励，以及金融资产的清算和结算等。</p>\n</blockquote>\n<p>总之这篇文章就是自己用 Hyperledger Fabric 搭建一套实验性联盟链网络的记录。</p>\n<h2 id=\"hyperledger-fabric-相关概念\"><a class=\"markdownIt-Anchor\" href=\"#hyperledger-fabric-相关概念\">#</a> Hyperledger Fabric 相关概念</h2>\n<p>区块链，一句话就是分布式数据库，相关内容可以看看咱之前的（虽然写得自己也看不懂就是了）<a href=\"https://eruihniyhbkbnf.github.io/blog/2022/07/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B/\">链接戳这里</a></p>\n<p>这里概念看不懂似乎没什么关系（反正咱一开始也没看懂），手动搭一下网络看看交易流程就懂了 qwq</p>\n<p>Hyperledger Fabric 网络架构：</p>\n<p><img data-src=\"https://tefoq5o3f4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDI5MzAzNWM0ZjY2NWI0MDdiM2UxNzUxZDI5NzhhMjBfQTRSaExtSFpad2tLNHdRNVVNSzI1WnB4UzFoelRNdHZfVG9rZW46Ym94Y255SjJLMmpRcVhNN2k2eXJCbjBuSExiXzE2Njk2NDU0NTU6MTY2OTY0OTA1NV9WNA\" alt=\"img\"></p>\n<p>每个颜色代表一个组织（Organization），组织由 Peer/Order 节点构成</p>\n<p>组织通过信道（Channel）组成联盟（Consortium），同一个联盟可以共享一些数据。</p>\n<p>相关图例解释：A: Application, S: Smart Contract, P: Peer, L: Ledger, O: Order, NC: Network Configuration, CA: Certificate Authentication, R: Administrator of a network, CC: Chain Code</p>\n<p>智能合约：相当于接口，提供给区块链应用程序，告诉应用程序可以进行什么操作</p>\n<p>补充一个 World State 的概念：区块链可能存在记录没有及时同步的情况，但<strong>主要起到的作用是保持历史操作记录不可篡改性</strong>。**World State 内存储最新数据，Ledger 内存储操作记录。** 也就是说，数据未及时同步时，新传来的事务仍然要写入区块链（那当然要写总不能不写叭 qwq），由此产生的最新数据存到一个传统的数据库（例如 Mysql）内，称之为世界状态。</p>\n<p>Peer 节点的类型：</p>\n<p><img data-src=\"https://tefoq5o3f4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGNjNjQyOWNjYjM2MjMyN2Q3YWY2MTIwODA3ZWMxOGZfbnFxUHFXNnB2aGgxYkM3WjdoUDZWWU5TUElPMlc0dlFfVG9rZW46Ym94Y24zSEpuQVg4RXJFb2FkekRIdEFjbm1lXzE2Njk2NDU0NTU6MTY2OTY0OTA1NV9WNA\" alt=\"img\"></p>\n<p><img data-src=\"https://tefoq5o3f4.feishu.cn/space/api/box/stream/download/asynccode/?code=YTAxZGFlNjNmNjI5OGNjN2RmZTNiNGNmOTZkZWMwM2JfaElLT081VGZEMGZBekNRRzdTYmdkaWVRZW5Qb0l4bk5fVG9rZW46Ym94Y25ZU2JSV0NvODN0NFg2WjVKTUZjY1FlXzE2Njk2NDU0NTU6MTY2OTY0OTA1NV9WNA\" alt=\"img\"></p>\n<h2 id=\"hyperledger-fabric-事务流程\"><a class=\"markdownIt-Anchor\" href=\"#hyperledger-fabric-事务流程\">#</a> Hyperledger Fabric 事务流程</h2>\n<p><img data-src=\"https://tefoq5o3f4.feishu.cn/space/api/box/stream/download/asynccode/?code=YmEzOTJiYTY1NGQxMDNjYzZlMmQ4YWY4YWY2M2QxZmFfSkZRNlhDNHRDdG04QnRnU0VEN1ZvdVNWM1RFeWh5TDZfVG9rZW46Ym94Y245cGJtN05HbEc4andWVTNLVmZ2bnJkXzE2Njk2NDU0NTU6MTY2OTY0OTA1NV9WNA\" alt=\"img\"></p>\n<p>继续从 Amazon 粘：</p>\n<blockquote>\n<p>1. 当客户端应用程序向每个组织中的对等节点发送事务提议以寻求获得背书时，事务处理流程就会启动。</p>\n<p>2. 对等节点会验证提交客户端的身份与提交该事务的权限。接下来，它们会模拟提议事务的结果，如果与预期相符，则将背书签字发回到客户端。</p>\n<p>3. 客户端会从对等节点收集背书，一旦收到背书策略中定义的适当数量背书，它会将事务发到排序服务。</p>\n<p>4. 最后，排序服务会检查该事务是否具有适当数量的背书，从而满足背书策略的要求。然后，它会以时间顺序对事务进行排序，将已获得批准的事务打包置于区块中，并且发送此类区块到每个组织的对等节点。对等节点从排序服务收取新的事务区块，接着对该区块中的事务进行最后验证。一旦验证完成，新区块会被添加到分类账，分类账的状态也会得到更新。新事务便提交完毕了。</p>\n</blockquote>\n<h2 id=\"hyperledger-fabric-安装\"><a class=\"markdownIt-Anchor\" href=\"#hyperledger-fabric-安装\">#</a> Hyperledger Fabric 安装</h2>\n<p>按照这个来：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oeXBlcmxlZGdlci1mYWJyaWMucmVhZHRoZWRvY3MuaW8vemhfQ04vbGF0ZXN0L2luc3RhbGwuaHRtbA==\">安装示例、二进制和 Docker 镜像 ‒ hyperledger-fabricdocs master 文档</span></p>\n<p>MacOS m1 芯片用户先自己滚了 QAQ：</p>\n<p><img data-src=\"https://tefoq5o3f4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDFlMzk4ODJlZmZkMjg3NmI2ZDdjYzA3MWU5ZjM0MGFfMlBrM3dhWml3Vmd3TWhZbE5PSEtXQUkxWHNld0ZtVXFfVG9rZW46Ym94Y25nNXZ2bnJSRDRJUE1ieGlPWFc5dzRlXzE2Njk2NDU0NTU6MTY2OTY0OTA1NV9WNA\" alt=\"img\"></p>\n<p>整了台服务器弄这个 qwq</p>\n<p>安装前置条件：</p>\n<pre><code class=\"language-Bash\">docker\ndocker-compose\ngo &gt;= 1.13 # hyperledger fabric需要用go来编译，如果手动安装记得配环境变量\nnode &gt;= 8 # 非必需，但官网文档例子都是用node的\n</code></pre>\n<p>之后执行文档里的命令：</p>\n<pre><code class=\"language-Bash\">curl -sSL https://bit.ly/2ysbOFE | bash -s\n</code></pre>\n<p>网络问题可以下载脚本看里面内容手动执行，脚本主要做了这些事情：</p>\n<ul>\n<li>\n<p>克隆 fabric-samples 仓库</p>\n</li>\n<li>\n<p>将 hyperledger fabric 平台特定的二进制文件和配置文件安装 到 fabric -samples 的 /bin 和 /config 目录中（就是上图的压缩包，和另一个 ca 的压缩包，脚本里都能找到链接。下载后都解压到 fabric-samples 的 bin 和 config 文件夹即可）</p>\n</li>\n<li>\n<p>下载指定版本的 hyperledger fabric docker 镜像</p>\n</li>\n</ul>\n<h2 id=\"fabcar-示例网络搭建\"><a class=\"markdownIt-Anchor\" href=\"#fabcar-示例网络搭建\">#</a> FabCar 示例网络搭建</h2>\n<p>之后可能看起来就比较顺利了：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oeXBlcmxlZGdlci1mYWJyaWMucmVhZHRoZWRvY3MuaW8vemhfQ04vbGF0ZXN0L3dyaXRlX2ZpcnN0X2FwcC5odG1s\">编写你的第一个应用 ‒ hyperledger-fabricdocs master 文档</span></p>\n<p>多翻翻源码可能好理解一些，源码也不算复杂 qwq</p>\n<p>首先安装 build-essential： <code>sudo apt install build-essential</code></p>\n<p>另外还需要 jq，可能一些 linux 是默认不自带的： <code>sudo apt install jq</code></p>\n<p>运行脚本，这边使用 typescript javascript：</p>\n<blockquote>\n<p>尝试使用 ts 报错：Error: endorsement failure during invoke. response: status:500 message:“error in simulation: failed to execute transaction 73087c3304017e5862b1d1021304f30fdf15882ebc615b6663aae8cc119ce709: could not launch chaincode fabcar_1:2e32781f4c99094f69aba39d0179fb8997c5e1e79f65e342f370427a4cb62846: chaincode registration failed: container exited with 1”</p>\n<p>搜到的 Ref: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjA2MTkzOTEvaGwtZmFicmljLTItMC1leHRlcm5hbC1jaGFpbmNvZGUtbGF1bmNoZXItZXJyb3ItaW4tc2ltdWxhdGlvbi1mYWlsZWQtdG8tZXhlY3U=\">https://stackoverflow.com/questions/60619391/hl-fabric-2-0-external-chaincode-launcher-error-in-simulation-failed-to-execu</span></p>\n<p>目前原因不明，遂采用 js</p>\n</blockquote>\n<pre><code class=\"language-Bash\">cd fabcar\n./startFabric.sh javascript\n</code></pre>\n<p>报错信息藏的很深仔细找找（指跟日志一起打印，不换号，没颜色 QAQ）</p>\n<p>网络创建成功后，可以看到如下消息：</p>\n<pre><code class=\"language-Bash\">JavaScript:\n\n  Start by changing into the &quot;javascript&quot; directory:\n    cd javascript\n\n  Next, install all required packages:\n    npm install\n\n  Then run the following applications to enroll the admin user, and register a new user\n  called appUser which will be used by the other applications to interact with the deployed\n  FabCar contract:\n    node enrollAdmin\n    node registerUser\n\n  You can run the invoke application as follows. By default, the invoke application will\n  create a new car, but you can update the application to submit other transactions:\n    node invoke\n\n  You can run the query application as follows. By default, the query application will\n  return all cars, but you can update the application to evaluate other transactions:\n    node query\n</code></pre>\n<p>之后可以按照官网文档愉快的先玩耍一波啦，顺着官方文档还可以看到智能合约里有什么，就很像各种接口叭 qwq</p>\n<h2 id=\"transaction-control-flow-详细解析\"><a class=\"markdownIt-Anchor\" href=\"#transaction-control-flow-详细解析\">#</a> Transaction Control Flow 详细解析</h2>\n<p>引用官网图片：</p>\n<p><img data-src=\"https://tefoq5o3f4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTI5OGRkNGQ2ZGM1ZDZiM2NkNTE2NWVkYTg3MTUxOTBfNWFZQmttbFZJeHdqQmU5RFR4SmdVODNhNFhxd0FLT3hfVG9rZW46Ym94Y251TVJueW9BTXFqd245TDFiSEZHZ0xjXzE2Njk2NDU0NTU6MTY2OTY0OTA1NV9WNA\" alt=\"img\"></p>\n<p>我们以 <code>createCar</code>  方法为例详细解释调用智能合约的事务流程：</p>\n<p>调用 <code>invoke.js</code> ，使用 <code>submitTransaction</code>  新建汽车，代码执行过程（内容来自源码）：</p>\n<ol>\n<li>创建 Transaction，进行提交：</li>\n</ol>\n<p>fabcar/javascript/node_modules/fabric-network/lib/contract.js:195：</p>\n<pre><code class=\"language-JavaScript\">createTransaction(name) &#123;\n    verifyTransactionName(name);\n    const qualifiedName = this._getQualifiedName(name);\n    const transaction = new transaction_1.Transaction(this, qualifiedName);\n    return transaction;\n&#125;\ndeserializeTransaction(data) &#123;\n    const state = JSON.parse(data.toString());\n    return new transaction_1.Transaction(this, state.name, state);\n&#125;\nasync submitTransaction(name, ...args) &#123;\n    return this.createTransaction(name).submit(...args);\n&#125;\n</code></pre>\n<ol>\n<li>从 contract 获取 channel，创建新的 endorcement，通过 endorcement 向 endorser 提交 proposal（由 endorsement 模拟执行），并获取 response：</li>\n</ol>\n<p>fabcar/javascript/node_modules/fabric-network/lib/transaction.js:208：</p>\n<pre><code class=\"language-JavaScript\">const method = `submit[$&#123;this.name&#125;]`;\nlogger.debug('%s - start', method);\nconst channel = this.contract.network.getChannel();\nconst transactionOptions = this.gatewayOptions.eventHandlerOptions;\n// This is the object that will centralize this endorsement activities\n// with the fabric network\nconst endorsement = channel.newEndorsement(this.contract.chaincodeId);\nconst proposalBuildRequest = this.newBuildProposalRequest(args);\nlogger.debug('%s - build and send the endorsement', method);\n// build the outbound request along with getting a new transactionId\n// from the identity context\nendorsement.build(this.identityContext, proposalBuildRequest);\nendorsement.sign(this.identityContext);\n// ------- S E N D   P R O P O S A L\n// This is where the request gets sent to the peers\nconst proposalSendRequest = &#123;&#125;;\n// ......\nconst proposalResponse = await endorsement.send(proposalSendRequest);\n</code></pre>\n<p>fabcar/javascript/node_modules/fabric-common/lib/index.s.ts:238：</p>\n<pre><code class=\"language-TypeScript\">export interface SendProposalRequest &#123;\n  targets?: Endorser[];\n  handler?: ServiceHandler;\n  requestTimeout?: number;\n  requiredOrgs?: string[];\n&#125;\n</code></pre>\n<ol>\n<li>获取 endorsement response 后，交给 committer，由 commit 提交给 order：</li>\n</ol>\n<p>fabcar/javascript/node_modules/fabric-network/lib/transaction.js:262：</p>\n<pre><code class=\"language-JavaScript\">// -----  C O M M I T   E N D O R S E M E N T\n// this is where the endorsement results are sent to the orderer\nconst commitSendRequest = &#123;&#125;;\nif (isInteger(transactionOptions.commitTimeout)) &#123;\n    commitSendRequest.requestTimeout = transactionOptions.commitTimeout * 1000; // in ms;\n&#125;\nif (proposalSendRequest.handler) &#123;\n    logger.debug('%s - use discovery to commit', method);\n    commitSendRequest.handler = proposalSendRequest.handler;\n&#125;\nelse &#123;\n    logger.debug('%s - use the orderers assigned to the channel', method);\n    commitSendRequest.targets = channel.getCommitters();\n&#125;\n// by now we should have a discovery handler or use the target orderers\n// that have been assigned from the channel to perform the commit\nconst commitResponse = await commit.send(commitSendRequest);\n</code></pre>\n<p>fabcar/javascript/node_modules/fabric-common/lib/index.s.ts:209：</p>\n<pre><code class=\"language-TypeScript\">export interface CommitSendRequest &#123;\n  targets?: Committer[];\n  handler?: ServiceHandler;\n  requestTimeout?: number;\n&#125;\n</code></pre>\n<ol>\n<li>获取 commit response，判断是否成功写入：</li>\n</ol>\n<p>fabcar/javascript/node_modules/fabric-network/lib/transaction.js:278：</p>\n<pre><code class=\"language-JavaScript\">const commitResponse = await commit.send(commitSendRequest);\nlogger.debug('%s - commit response %j', method, commitResponse);\nif (commitResponse.status !== 'SUCCESS') &#123;\n    const msg = `Failed to commit transaction %$&#123;endorsement.getTransactionId()&#125;, orderer response status: $&#123;commitResponse.status&#125;`;\n    logger.error('%s - %s', method, msg);\n    eventHandler.cancelListening();\n    throw new Error(msg);\n&#125;\nelse &#123;\n    logger.debug('%s - successful commit', method);\n&#125;\nlogger.debug('%s - wait for the transaction to be committed on the peer', method);\nawait eventHandler.waitForEvents();\nreturn result;\n</code></pre>\n<p>基本跟上面流程一致啦，详细内容可以看看咱的实验报告：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWZvcTVvM2Y0LmZlaXNodS5jbi9kb2N4L0Zma2dkd0VDMW9KZ0IyeDFZYVpjMkd0Ym4xZQ==\">Hyperledger Fabric 2.0 分布式实验环境搭建记录</span></p>\n",
            "tags": [
                "区块链",
                "web3"
            ]
        },
        {
            "id": "https://eruihniyhbkbnf.github.io/blog/2022/07/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B/",
            "url": "https://eruihniyhbkbnf.github.io/blog/2022/07/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B/",
            "title": "区块链简单了解一下",
            "date_published": "2022-07-11T02:47:10.000Z",
            "content_html": "<h2 id=\"区块链相关概念\"><a class=\"markdownIt-Anchor\" href=\"#区块链相关概念\">#</a> 区块链相关概念</h2>\n<p>概念不说人话，感觉不如下边实例更好理解 qwq</p>\n<h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h3>\n<p>说点人话，就是一种技术，能够实现极高信用保证的东西 qwq</p>\n<p>区块链相关技术：<strong>密码学</strong>、控制论、博弈论、<strong>分布式</strong>系统、数字货币</p>\n<p>主要用于去<strong>中心化分布式记账本</strong>技术，应用：金融、贸易、征信、物联网、共享经济 blabla…</p>\n<p>区块链常见定义方式：</p>\n<ul>\n<li>\n<p>不依赖于第三方，通过自身分布式节点进行网络数据存储、验证、传递、交流</p>\n</li>\n<li>\n<p>分布式开放性的大型网络记账簿，任何人都可以在任何时间进行操作</p>\n</li>\n<li>\n<p>分布式、去中心化的计算与存储架构</p>\n</li>\n</ul>\n<p>区块链的特征：</p>\n<ul>\n<li>\n<p><strong>去中心化</strong></p>\n</li>\n<li>\n<p><strong>开放透明</strong></p>\n</li>\n<li>\n<p><strong>安全性</strong></p>\n</li>\n<li>\n<p><strong>匿名性</strong></p>\n</li>\n</ul>\n<p>举例，比特币交易流程：</p>\n<ol>\n<li>\n<p>发起事务请求</p>\n</li>\n<li>\n<p>请求事务广播到网络 p2p 节点</p>\n</li>\n<li>\n<p>节点使用加密算法验证</p>\n</li>\n<li>\n<p>验证成功，该事务被标识为一个新区块</p>\n</li>\n<li>\n<p>新区块添加到现有区块中</p>\n</li>\n</ol>\n<h3 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h3>\n<h4 id=\"公有链\"><a class=\"markdownIt-Anchor\" href=\"#公有链\">#</a> 公有链</h4>\n<ul>\n<li>\n<p>所有人均可参与</p>\n</li>\n<li>\n<p>完全去中心化</p>\n</li>\n<li>\n<p>效率很低</p>\n</li>\n</ul>\n<p>全世界都可以访问，比如比特币的区块链，不过区块链维护要钱，所以公有链不会太多 qwq</p>\n<h4 id=\"联盟链\"><a class=\"markdownIt-Anchor\" href=\"#联盟链\">#</a> 联盟链</h4>\n<ul>\n<li>\n<p>记账权由部分组织共享</p>\n</li>\n<li>\n<p>不完全去中心化</p>\n</li>\n<li>\n<p>效率较高</p>\n</li>\n</ul>\n<p>可以有几个主节点，这些主节点不挂就行。一般由一些组织成员共享（比如几家快递公司共享物流信息什么的），这样就可以每个成员出一部分钱来维护了，区块链最常见的是联盟链。</p>\n<h4 id=\"私有链\"><a class=\"markdownIt-Anchor\" href=\"#私有链\">#</a> 私有链</h4>\n<ul>\n<li>\n<p>记账权集中到一点</p>\n</li>\n<li>\n<p>完全中心化</p>\n</li>\n<li>\n<p>效率最高</p>\n</li>\n</ul>\n<p>没什么意义，自己玩就没意思了 qwq</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>公有链</th>\n<th>联盟链</th>\n<th>私有链</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>参与者</td>\n<td>所有人</td>\n<td>联盟成员</td>\n<td>所有者</td>\n</tr>\n<tr>\n<td>记账人</td>\n<td>所有人</td>\n<td>成员协商确定</td>\n<td>所有者</td>\n</tr>\n<tr>\n<td>中心化程度</td>\n<td>完全去中心化</td>\n<td>部分中心节点</td>\n<td>完全中心化</td>\n</tr>\n<tr>\n<td>典型场景</td>\n<td>加密货币</td>\n<td>物流</td>\n<td>大型组织机构</td>\n</tr>\n<tr>\n<td>交易可视化</td>\n<td>完全</td>\n<td>不可视</td>\n<td>视情况而定</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"结构\"><a class=\"markdownIt-Anchor\" href=\"#结构\">#</a> 结构</h3>\n<p>区块链，看名字就是<strong>块</strong>加上<strong>链表</strong>嘛 qwq</p>\n<p>一些不说人话的概念：</p>\n<ul>\n<li>\n<p>交易（Transaction）：一次操作导致账本状态的改变，如插入一条数据。</p>\n</li>\n<li>\n<p>区块（Block）：记录一段时间内的交易信息和结果，由头和主体组成，主体记录交易信息，头部记录链相关信息。</p>\n</li>\n<li>\n<p>链（Chain）：区块按照发生顺序串联，是整个状态变化的日志。</p>\n</li>\n</ul>\n<p><strong>每个块（链表节点）包含结构</strong>：</p>\n<ul>\n<li>\n<p>timestamp: 区块产生时间戳</p>\n</li>\n<li>\n<p>nonce: 随机值，与区块头的 hash 值共同证明计算量（工作量），用于计算哈希（详见代码实现）</p>\n</li>\n<li>\n<p>data: 区块链上存储的数据（默克尔树存储）</p>\n</li>\n<li>\n<p>previousHash: 上一个区块的 hash</p>\n</li>\n<li>\n<p>currentHash: 本区块链的 hash，由上述几个属性进行哈希计算而得</p>\n</li>\n</ul>\n<h3 id=\"挖矿是什么\"><a class=\"markdownIt-Anchor\" href=\"#挖矿是什么\">#</a> 挖矿是什么</h3>\n<p>这是一种基于 PoW (Proof of Work) （即工作量证明）机制的操作，知名货币比特币、以太币都使用了 PoW 机制。</p>\n<p>每个区块链都运行在一个<strong>共识机制</strong>上，共识机制是该区块链网络上所有节点的协议，目的是证明在该区块链操作的真实性：</p>\n<ul>\n<li>\n<p>确保交易的真实性</p>\n</li>\n<li>\n<p>防止有人恶意篡改帐本</p>\n</li>\n<li>\n<p>确认交易</p>\n</li>\n<li>\n<p>避免双重支付</p>\n</li>\n</ul>\n<p>我们拿比特币来举例：比特币网路中的人被称为<strong>矿工</strong>，使用算力、电力、时间来计算 PoW 的过程称为<strong>挖矿</strong>，借此开采新的区块，终极目标是争夺每个区块的记帐拥有权，并取得奖励 (获得比特币)。</p>\n<p>PoW 机制认为，网络中有超过 51% 的节点认为操作是真实的，就可以证明某操作是真实的。<strong>它被设计为要消耗大量算力，可以有效防止数据被篡改</strong>，毕竟，不可能有人的算力能超过这个巨大的网络中 51% 的计算机。（换句话说，篡改要消耗的算力都超过正常挖矿需要的算力了，有那能力去改数据还不如老实去挖矿）。</p>\n<p>PoW 缺点也是显而易见的，就是要消耗大量毫无意义的算力，以及，假如真的有人掌握超过全网半数以上的算力，还是可以随意篡改数据的（虽然可能性不大 qwq）。</p>\n<p>当然，共识机制不只有 PoW 一种，比较出名的还有 PBFT，PoS，blabla… 就不细说了 qwq</p>\n<h2 id=\"代码实现简易区块链\"><a class=\"markdownIt-Anchor\" href=\"#代码实现简易区块链\">#</a> 代码实现简易区块链</h2>\n<h3 id=\"基本结构\"><a class=\"markdownIt-Anchor\" href=\"#基本结构\">#</a> 基本结构</h3>\n<p>Java 代码实现简易的区块链，结构如上文所述（为什么是 java，因为是比着 java 的例子抄的嘤～）</p>\n<h4 id=\"哈希\"><a class=\"markdownIt-Anchor\" href=\"#哈希\">#</a> 哈希</h4>\n<p>我们要保证，当前区块的 previousHash 和前一个区块的 currentHash 始终保持一致，这样才能认为这个区块链是有效的。</p>\n<p>将区块链所有的信息转换成一个哈希，通过这个哈希的值来验证当前块是否被篡改过。</p>\n<h4 id=\"挖矿过程的设计\"><a class=\"markdownIt-Anchor\" href=\"#挖矿过程的设计\">#</a> 挖矿过程的设计</h4>\n<p>我们要设定一种方法，它可以消耗一部分算力，使得篡改区块产生一定成本。（<strong>注意这个操作本身是没有意义的，目的就是让区块变得难以篡改</strong>）</p>\n<p>还记得刚刚定义的随机数 nonce 吗，它的作用就是保证每次哈希计算值都不同。</p>\n<p>我们设定一个难度 difficulty，不断计算区块的哈希（每次 nonce+1），直到区块 hash 值前 difficulty 位为 0 时才认为这个哈希是有效的。这个不断计算的过程就称为<strong>挖矿</strong>。</p>\n<p>这样简单想一下，当我们篡改某个块的内容时，重新计算它的 hash 需要一个复杂的挖矿过程。由于它后一个块也有一个 previousHash 字段被改变，要保证链的有效性，我们也需要对后一个块进行挖矿，后一个块的后一个块也要挖矿… 这样篡改的成本就非常高了。</p>\n<h4 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h4>\n<p>首先我们按上文所述定义一个区块：</p>\n<p>Block.java:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">blockchain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageDigest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Block</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> currentId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 唯一标识</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> timestamp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 时间戳</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> currentHash<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前块 hash</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> previousHash<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前一个块 hash</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前块信息</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> nonce<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于计算 hash 的随机值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Block</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> previousHash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> currentId<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>previousHash <span class=\"token operator\">=</span> previousHash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentHash <span class=\"token operator\">=</span> <span class=\"token function\">calculateHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   * 将头部信息转换成 16 进制哈希值</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">calculateHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">StringBuffer</span> hexString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token class-name\">String</span> inpuString <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> previousHash <span class=\"token operator\">+</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> data <span class=\"token operator\">+</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>nonce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token class-name\">MessageDigest</span> digest <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageDigest</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SHA-256\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hash <span class=\"token operator\">=</span> digest<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span>inpuString<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> hash<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">String</span> hex <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> hexString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        hexString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> hexString<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   * 挖矿过程计算哈希，不断变换 nonce 值并计算哈希，直到哈希值第一位开始的 difficulty 个字符为 0</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   * @param difficulty 挖矿难度，设定前几位为 0</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mineBlock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> difficulty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token class-name\">String</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>difficulty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>currentHash<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> difficulty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      nonce<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      currentHash <span class=\"token operator\">=</span> <span class=\"token function\">calculateHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Block mined: \"</span> <span class=\"token operator\">+</span> currentHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Block #\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token string\">\"Timestamp: \"</span> <span class=\"token operator\">+</span> timestamp <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token string\">\"Previous Hash: \"</span> <span class=\"token operator\">+</span> previousHash <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token string\">\"Current Hash: \"</span> <span class=\"token operator\">+</span> currentHash <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token string\">\"Data: \"</span> <span class=\"token operator\">+</span> data <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token string\">\"Nonce: \"</span> <span class=\"token operator\">+</span> nonce <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来我们通过这些区块组建一个区块链，并提供一些验证机制：</p>\n<p>BlockChain.java:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">blockchain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockChain</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> difficulty <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Block</span><span class=\"token punctuation\">></span></span> chain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Block</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">genernateBlockChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Block</span> b1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Block</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"First block.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    b1<span class=\"token punctuation\">.</span><span class=\"token function\">mineBlock</span><span class=\"token punctuation\">(</span>difficulty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    chain<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">Block</span> b2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Block</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">.</span>currentHash<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Second block.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    b2<span class=\"token punctuation\">.</span><span class=\"token function\">mineBlock</span><span class=\"token punctuation\">(</span>difficulty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    chain<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current BlockChain valid:\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">validateChain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   * 验证区块是否有效，防止被篡改</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   * 1. 前后衔接是否合法</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   * 2. 当前块是否有效</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   * @param current 当前区块</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   * @param previous 前一个区块</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   * @return</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">validateBlock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Block</span> current<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Block</span> previous<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>current<span class=\"token punctuation\">.</span>previousHash<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">.</span>currentHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>current<span class=\"token punctuation\">.</span>currentHash<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">calculateHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   * 验证链是否有效，验证所有区块有效性即可</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   * @param chain 区块链</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   * @return</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">validateChain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Block</span><span class=\"token punctuation\">></span></span> chain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token class-name\">Block</span> previous <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token class-name\">Block</span> current <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">validateBlock</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      previous <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用 genernateBlockChain 方法，控制台输出：</p>\n<pre><code class=\"language-Plain\">Block mined: 00e8eed71c98e68668f37e23d6e3af8891b59fc81ae3b7725b4f546f11192ae6\nBlock #0\nTimestamp: 1656863294128\nPrevious Hash: null\nCurrent Hash: 00e8eed71c98e68668f37e23d6e3af8891b59fc81ae3b7725b4f546f11192ae6\nData: First block.\nNonce: 90\n\nBlock mined: 00b02c57715baba6c263adf075d5fd01af0d2ce45f72a60b4161e1d715543b0c\nBlock #1\nTimestamp: 1656863294149\nPrevious Hash: 00e8eed71c98e68668f37e23d6e3af8891b59fc81ae3b7725b4f546f11192ae6\nCurrent Hash: 00b02c57715baba6c263adf075d5fd01af0d2ce45f72a60b4161e1d715543b0c\nData: Second block.\nNonce: 392\n\nCurrent BlockChain valid:true\n</code></pre>\n<h2 id=\"应用实例简易转账系统\"><a class=\"markdownIt-Anchor\" href=\"#应用实例简易转账系统\">#</a> 应用实例：简易转账系统</h2>\n<h3 id=\"rsa加密简介\"><a class=\"markdownIt-Anchor\" href=\"#rsa加密简介\">#</a> RSA 加密简介</h3>\n<p>首先需要了解一下 RSA 加密，拿之前蓝桥杯一个题一图看懂（看不懂也没事，知道密钥对干啥的就行 qwq）：</p>\n<p><img data-src=\"https://tefoq5o3f4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGE1OWJhY2NkN2Q3MTUyODhlMTcwOTdhN2FhZmFmNzlfVEtmNXJxdE5jM3RTazl3aGZTSW9adFpRc2NpdG02YTFfVG9rZW46Ym94Y252TFJkUE12bTBONldpRDh1eFUzSHpNXzE2NTc1MDc1ODg6MTY1NzUxMTE4OF9WNA\" alt=\"img\"></p>\n<p>（放一下题解）</p>\n<p><img data-src=\"https://tefoq5o3f4.feishu.cn/space/api/box/stream/download/asynccode/?code=M2QyMmJkZGY4NTZhMDc4OGJkZDVhZDQxNTQ5NDM0ZjVfTEJEYUw5aGw0N3NyOW5jb1Q0ZEllQmdMZlFnVFQ0VURfVG9rZW46Ym94Y25WUUN5N3Jac2l5MUl3YzV6TnkybjhnXzE2NTc1MDc1ODg6MTY1NzUxMTE4OF9WNA\" alt=\"img\"></p>\n<p>对于一个转账行为，用户持有公私密钥对，<strong>可以通过公钥来确定是哪个用户</strong>（这里为了简化流程，我们省去了签名的过程）。</p>\n<h3 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h3>\n<p>定义一个事务，即一个转账行为，包含转账相关信息，这里发送接收者实际上就是存储用户的公钥。</p>\n<p>Transaction.java:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">blockchainApp</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Transaction</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> sender<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转账发出者</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> recipient<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转账接收者</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转账金额</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> from<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sender <span class=\"token operator\">=</span> from<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>recipient <span class=\"token operator\">=</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Block，使其存储信息为记账本（即 Transection 数组）：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">></span></span> transactions<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 账本信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 另外在 calculateHash 方法中，把所有记账信息放入哈希计算即可，不贴详细代码了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Transaction</span> transaction <span class=\"token operator\">:</span> transactions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  inpuString <span class=\"token operator\">+=</span> transaction<span class=\"token punctuation\">.</span>recipient <span class=\"token operator\">+</span> transaction<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">+</span> transaction<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>定义用户（钱包？）存储密钥对和初始余额（实时余额应该通过区块链进行计算），具有向别人转账的方法。</p>\n<p>Wallet.java:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">blockchainApp</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KeyPair</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KeyPairGenerator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoSuchAlgorithmException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Wallet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> publicKey<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 公钥</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> privateKey<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 私钥</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> balance<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始余额，实际余额会通过区块链计算得出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Block</span><span class=\"token punctuation\">></span></span> blockchain<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 区块链</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Wallet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> balance<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Block</span><span class=\"token punctuation\">></span></span> blockchain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">generateRSAKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>blockchain <span class=\"token operator\">=</span> blockchain<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   * 生成 RSA 密钥对</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">generateRSAKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">KeyPair</span> keyPair<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      keyPair <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyPairGenerator</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateKeyPair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      privateKey <span class=\"token operator\">=</span> keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPrivate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      publicKey <span class=\"token operator\">=</span> keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPublic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchAlgorithmException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   * 从区块链计算并获取当前账户的总余额</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">float</span> total <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Block</span> block <span class=\"token operator\">:</span> blockchain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Transaction</span> transaction <span class=\"token operator\">:</span> block<span class=\"token punctuation\">.</span>transactions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>transaction<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          total <span class=\"token operator\">-=</span> transaction<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>transaction<span class=\"token punctuation\">.</span>recipient<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          total <span class=\"token operator\">+=</span> transaction<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   * 向 recipient 转账 amount 金额</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   * @param recipient 接收者的 RSA 公钥</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   * @param amount</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   * @return 这次交易的记录</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Transaction</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> recipient<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"余额不足\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token class-name\">Transaction</span> transaction <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span> recipient<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">// transaction.sign(privateKey);</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> transaction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>之后就可以在 BlockChain 上做一些神奇操作 BlockChainApp.java：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 修改部分不多，粘部分代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">></span></span> transactions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">genernateBlockChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token class-name\">Wallet</span> <span class=\"token class-name\">Alice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Wallet</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token class-name\">Wallet</span> <span class=\"token class-name\">Bob</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Wallet</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice's initial balance: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob's initial balance: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice is sending 10 coins to Bob...\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token class-name\">Transaction</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    transactions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token class-name\">Block</span> b1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Block</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  b1<span class=\"token punctuation\">.</span><span class=\"token function\">mineBlock</span><span class=\"token punctuation\">(</span>difficulty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  chain<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current BlockChain valid:\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">validateChain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice's balance: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob's balance: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob is sending 20 coins to Alice...\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 踩坑记录：新建块时没有重置记账本</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token class-name\">Transaction</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    transactions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token class-name\">Block</span> b2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Block</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">.</span>currentHash<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  b2<span class=\"token punctuation\">.</span><span class=\"token function\">mineBlock</span><span class=\"token punctuation\">(</span>difficulty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  chain<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current BlockChain valid:\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">validateChain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice's balance: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob's balance: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用 genernateBlockChain 方法，控制台输出：</p>\n<pre><code class=\"language-Plain\">Alice's initial balance: 100.0\nBob's initial balance: 100.0\n\nAlice is sending 10 coins to Bob...\n\nBlock mined: 00015b8569eb2adb86fac6a967e0ade85b271a708a136d8c3e7bc2e9d691b97d\nBlock #0\nTimestamp: 1656864082866\nPrevious Hash: null\nCurrent Hash: 00015b8569eb2adb86fac6a967e0ade85b271a708a136d8c3e7bc2e9d691b97d\nData: null\nNonce: 1567\n\nCurrent BlockChain valid:true\n\nAlice's balance: 90.0\nBob's balance: 110.0\n\nBob is sending 20 coins to Alice...\n\nBlock mined: 0080d90b23bc72f028e167050b9b116991d40634b6acd2aa64406f6445410b8b\nBlock #1\nTimestamp: 1656864082946\nPrevious Hash: 00015b8569eb2adb86fac6a967e0ade85b271a708a136d8c3e7bc2e9d691b97d\nCurrent Hash: 0080d90b23bc72f028e167050b9b116991d40634b6acd2aa64406f6445410b8b\nData: null\nNonce: 99\n\nCurrent BlockChain valid:true\n\nAlice's balance: 110.0\nBob's balance: 90.0\n</code></pre>\n<h2 id=\"区块链demo\"><a class=\"markdownIt-Anchor\" href=\"#区块链demo\">#</a> 区块链 demo</h2>\n<p>Github 上一个用 node 写的简易区块链，感觉非常棒 qwq</p>\n<p>区块链 Demo (Code): <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FuZGVyczk0L2Jsb2NrY2hhaW4tZGVtbw==\">https://github.com/anders94/blockchain-demo</span></p>\n<p>Demo: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbmRlcnNicm93bndvcnRoLmNvbS9ibG9ja2NoYWluL2Rpc3RyaWJ1dGVk\">Blockchain Demo</span></p>\n",
            "tags": [
                "区块链",
                "web3"
            ]
        }
    ]
}